1. 
    dx          Thread 0         
    0   
    -1   1000 sub  $1,%dx
    -1   1001 test $0,%dx
    -1   1002 jgte .top
    -1   1003 halt

2. 
    dx          Thread 0                Thread 1         
    3   
    2   1000 sub  $1,%dx
    2   1001 test $0,%dx
    2   1002 jgte .top
    1   1000 sub  $1,%dx
    1   1001 test $0,%dx
    1   1002 jgte .top
    0   1000 sub  $1,%dx
    0   1001 test $0,%dx
    0   1002 jgte .top
    -1  1000 sub  $1,%dx
    -1  1001 test $0,%dx
    -1  1002 jgte .top
    -1  1003 halt
    3   ----- Halt;Switch -----  ----- Halt;Switch -----  
    2                            1000 sub  $1,%dx
    2                            1001 test $0,%dx
    2                            1002 jgte .top
    1                            1000 sub  $1,%dx
    1                            1001 test $0,%dx
    1                            1002 jgte .top
    0                            1000 sub  $1,%dx
    0                            1001 test $0,%dx
    0                            1002 jgte .top
    -1                           1000 sub  $1,%dx
    -1                           1001 test $0,%dx
    -1                           1002 jgte .top
    -1                           1003 halt

No it does not because there's no untimely interrupt that messes up the instructions. As a result,
there's no race in the code as no instructions are accessing the same variable at the same test.

3. Seed 0: 
    dx          Thread 0                Thread 1         
    3   
    2   1000 sub  $1,%dx
    2   1001 test $0,%dx
    2   1002 jgte .top
    3   ------ Interrupt ------  ------ Interrupt ------  
    2                            1000 sub  $1,%dx
    2                            1001 test $0,%dx
    2                            1002 jgte .top
    2   ------ Interrupt ------  ------ Interrupt ------  
    1   1000 sub  $1,%dx
    1   1001 test $0,%dx
    2   ------ Interrupt ------  ------ Interrupt ------  
    1                            1000 sub  $1,%dx
    1   ------ Interrupt ------  ------ Interrupt ------  
    1   1002 jgte .top
    0   1000 sub  $1,%dx
    1   ------ Interrupt ------  ------ Interrupt ------  
    1                            1001 test $0,%dx
    1                            1002 jgte .top
    0   ------ Interrupt ------  ------ Interrupt ------  
    0   1001 test $0,%dx
    0   1002 jgte .top
    -1  1000 sub  $1,%dx
    1   ------ Interrupt ------  ------ Interrupt ------  
    0                            1000 sub  $1,%dx
    -1  ------ Interrupt ------  ------ Interrupt ------  
    -1  1001 test $0,%dx
    -1  1002 jgte .top
    0   ------ Interrupt ------  ------ Interrupt ------  
    0                            1001 test $0,%dx
    0                            1002 jgte .top
    -1  ------ Interrupt ------  ------ Interrupt ------  
    -1  1003 halt
    0   ----- Halt;Switch -----  ----- Halt;Switch -----  
    -1                           1000 sub  $1,%dx
    -1                           1001 test $0,%dx
    -1  ------ Interrupt ------  ------ Interrupt ------  
    -1                           1002 jgte .top
    -1                           1003 halt

  Seed 1: 
  dx          Thread 0                Thread 1         
    3   
    2   1000 sub  $1,%dx
    3   ------ Interrupt ------  ------ Interrupt ------  
    2                            1000 sub  $1,%dx
    2                            1001 test $0,%dx
    2                            1002 jgte .top
    2   ------ Interrupt ------  ------ Interrupt ------  
    2   1001 test $0,%dx
    2   1002 jgte .top
    1   1000 sub  $1,%dx
    2   ------ Interrupt ------  ------ Interrupt ------  
    1                            1000 sub  $1,%dx
    1   ------ Interrupt ------  ------ Interrupt ------  
    1   1001 test $0,%dx
    1   1002 jgte .top
    1   ------ Interrupt ------  ------ Interrupt ------  
    1                            1001 test $0,%dx
    1                            1002 jgte .top
    1   ------ Interrupt ------  ------ Interrupt ------  
    0   1000 sub  $1,%dx
    0   1001 test $0,%dx
    1   ------ Interrupt ------  ------ Interrupt ------  
    0                            1000 sub  $1,%dx
    0                            1001 test $0,%dx
    0                            1002 jgte .top
    0   ------ Interrupt ------  ------ Interrupt ------  
    0   1002 jgte .top
    0   ------ Interrupt ------  ------ Interrupt ------  
    -1                           1000 sub  $1,%dx
    0   ------ Interrupt ------  ------ Interrupt ------  
    -1  1000 sub  $1,%dx
    -1  1001 test $0,%dx
    -1  1002 jgte .top
    -1  ------ Interrupt ------  ------ Interrupt ------  
    -1                           1001 test $0,%dx
    -1                           1002 jgte .top
    -1  ------ Interrupt ------  ------ Interrupt ------  
    -1  1003 halt
    -1  ----- Halt;Switch -----  ----- Halt;Switch -----  
    -1                           1003 halt

Not really, changing the interrupt frequency only makes the program longer because the OS
can context switch correctly and the thread doesn't have to take a copy of a shared variable,
so varying the interrupt frequency doesn't affect the program too much. (Plus there's no critical
section)

4. 
 2000      ax    bx          Thread 0         
    0       0     0   
    0       0     0   1000 mov 2000, %ax
    0       1     0   1001 add $1, %ax
    1       1     0   1002 mov %ax, 2000
    1       1     -1  1003 sub  $1, %bx
    1       1     -1  1004 test $0, %bx
    1       1     -1  1005 jgt .top
    1       1     -1  1006 halt

5. 
 2000      ax    bx          Thread 0                Thread 1         
    0       0     3   
    0       0     3   1000 mov 2000, %ax
    0       1     3   1001 add $1, %ax
    1       1     3   1002 mov %ax, 2000
    1       1     2   1003 sub  $1, %bx
    1       1     2   1004 test $0, %bx
    1       1     2   1005 jgt .top
    1       1     2   1000 mov 2000, %ax
    1       2     2   1001 add $1, %ax
    2       2     2   1002 mov %ax, 2000
    2       2     1   1003 sub  $1, %bx
    2       2     1   1004 test $0, %bx
    2       2     1   1005 jgt .top
    2       2     1   1000 mov 2000, %ax
    2       3     1   1001 add $1, %ax
    3       3     1   1002 mov %ax, 2000
    3       3     0   1003 sub  $1, %bx
    3       3     0   1004 test $0, %bx
    3       3     0   1005 jgt .top
    3       3     0   1006 halt
    3       0     3   ----- Halt;Switch -----  ----- Halt;Switch -----  // Correct, register are set to 0 upon switch
    3       3     3                            1000 mov 2000, %ax
    3       4     3                            1001 add $1, %ax
    4       4     3                            1002 mov %ax, 2000
    4       4     2                            1003 sub  $1, %bx
    4       4     2                            1004 test $0, %bx
    4       4     2                            1005 jgt .top
    4       4     2                            1000 mov 2000, %ax
    4       5     2                            1001 add $1, %ax
    5       5     2                            1002 mov %ax, 2000
    5       5     1                            1003 sub  $1, %bx
    5       5     1                            1004 test $0, %bx
    5       5     1                            1005 jgt .top
    5       5     1                            1000 mov 2000, %ax
    5       6     1                            1001 add $1, %ax
    6       6     1                            1002 mov %ax, 2000
    6       6     0                            1003 sub  $1, %bx
    6       6     0                            1004 test $0, %bx
    6       6     0                            1005 jgt .top
    6       6     0                            1006 halt

Each thread loops three times because the register bx controls the number of iterations and was set
to 3, so each thread loops three times. The final value of VALUE is 6.

6. Seed 0 (I predict final value of 2, looking at the interleaving of the threads):
 2000      ax    bx          Thread 0                Thread 1         
    0       0     0   
    0       0     0   1000 mov 2000, %ax
    0       1     0   1001 add $1, %ax
    1       1     0   1002 mov %ax, 2000
    1       1     -1  1003 sub  $1, %bx
    1       0     0   ------ Interrupt ------  ------ Interrupt ------  
    1       1     0                            1000 mov 2000, %ax
    1       2     0                            1001 add $1, %ax
    2       2     0                            1002 mov %ax, 2000
    2       2     -1                           1003 sub  $1, %bx
    2       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    2       1     -1  1004 test $0, %bx
    2       1     -1  1005 jgt .top
    2       2     -1  ------ Interrupt ------  ------ Interrupt ------  
    2       2     -1                           1004 test $0, %bx
    2       2     -1                           1005 jgt .top
    2       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    2       1     -1  1006 halt
    2       2     -1  ----- Halt;Switch -----  ----- Halt;Switch -----  
    2       2     -1                           1006 halt

Seed 1 (I predict final value of 1, looking at the interleaving of the threads):
 2000      ax    bx          Thread 0                Thread 1         
    0       0     0   
    0       0     0   1000 mov 2000, %ax
    0       0     0   ------ Interrupt ------  ------ Interrupt ------  
    0       0     0                            1000 mov 2000, %ax
    0       1     0                            1001 add $1, %ax
    1       1     0                            1002 mov %ax, 2000
    1       1     -1                           1003 sub  $1, %bx
    1       0     0   ------ Interrupt ------  ------ Interrupt ------  
    1       1     0   1001 add $1, %ax
    1       1     0   1002 mov %ax, 2000
    1       1     -1  1003 sub  $1, %bx
    1       1     -1  1004 test $0, %bx
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1                           1004 test $0, %bx
    1       1     -1                           1005 jgt .top
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1  1005 jgt .top
    1       1     -1  1006 halt
    1       1     -1  ----- Halt;Switch -----  ----- Halt;Switch -----  
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1                           1006 halt

It's hard to tell where the final value would be (especially if there's multiple iterations) because
you have to look if the instructions to take the value, increment it, and store it back are separated,
and if they are, where they are and what they would set the VALUE to. The timing of the interrupt 
matters greatly because if the interrupts are timely, VALUE would be 2, but they aren't, then VALUE is
1. It can safely occur after the instructions to take, increment, and store the shared variable have
been executed as afterwards, the instructions work on another register that can be restored safely.
It can't occur during any of the instructions to take, increment, and store a shared variable because
the next thread would take the wrong value and put in a wrong number. The critical section starts when
the instructions copy a shared variable to a register and ends when it stores the register back in
the shared variable.

7. -i 1:
 2000      ax    bx          Thread 0                Thread 1         
    0       0     0   
    0       0     0   1000 mov 2000, %ax
    0       0     0   ------ Interrupt ------  ------ Interrupt ------  
    0       0     0                            1000 mov 2000, %ax
    0       0     0   ------ Interrupt ------  ------ Interrupt ------  
    0       1     0   1001 add $1, %ax
    0       0     0   ------ Interrupt ------  ------ Interrupt ------  
    0       1     0                            1001 add $1, %ax
    0       1     0   ------ Interrupt ------  ------ Interrupt ------  
    1       1     0   1002 mov %ax, 2000
    1       1     0   ------ Interrupt ------  ------ Interrupt ------  
    1       1     0                            1002 mov %ax, 2000
    1       1     0   ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1  1003 sub  $1, %bx
    1       1     0   ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1                            1003 sub  $1, %bx
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1  1004 test $0, %bx
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1                           1004 test $0, %bx
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1  1005 jgt .top
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1                           1005 jgt .top
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1  1006 halt
    1       1     -1  ----- Halt;Switch -----  ----- Halt;Switch -----  
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1                           1006 halt

-i 2:
 2000      ax    bx          Thread 0                Thread 1         
    0       0     0   
    0       0     0   1000 mov 2000, %ax
    0       1     0   1001 add $1, %ax
    0       0     0   ------ Interrupt ------  ------ Interrupt ------  
    0       0     0                            1000 mov 2000, %ax
    0       1     0                            1001 add $1, %ax
    0       1     0   ------ Interrupt ------  ------ Interrupt ------  
    1       1     0   1002 mov %ax, 2000
    1       1     -1  1003 sub  $1, %bx
    1       1     0   ------ Interrupt ------  ------ Interrupt ------  
    1       1     0                            1002 mov %ax, 2000
    1       1     -1                           1003 sub  $1, %bx
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1  1004 test $0, %bx
    1       1     -1  1005 jgt .top
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1                           1004 test $0, %bx
    1       1     -1                           1005 jgt .top
    1       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    1       1     -1  1006 halt
    1       1     -1  ----- Halt;Switch -----  ----- Halt;Switch -----  
    1       1     -1                           1006 halt

-i 3:
 2000      ax    bx          Thread 0                Thread 1         
    0       0     0   
    0       0     0   1000 mov 2000, %ax
    0       1     0   1001 add $1, %ax
    1       1     0   1002 mov %ax, 2000
    1       0     0   ------ Interrupt ------  ------ Interrupt ------  
    1       1     0                            1000 mov 2000, %ax
    1       2     0                            1001 add $1, %ax
    2       2     0                            1002 mov %ax, 2000
    2       1     0   ------ Interrupt ------  ------ Interrupt ------  
    2       1     -1  1003 sub  $1, %bx
    2       1     -1  1004 test $0, %bx
    2       1     -1  1005 jgt .top
    2       2     0   ------ Interrupt ------  ------ Interrupt ------  
    2       2     -1                           1003 sub  $1, %bx
    2       2     -1                           1004 test $0, %bx
    2       2     -1                           1005 jgt .top
    2       1     -1  ------ Interrupt ------  ------ Interrupt ------  
    2       1     -1  1006 halt
    2       2     -1  ----- Halt;Switch -----  ----- Halt;Switch -----  
    2       2     -1                           1006 halt

Interrupt intervals that allow the critical section to run atomically (like -i 3 or multiples of 3) 
will give the "correct" answer.

8. Interrupt intervals that are a multiple of 3 will give the "correct" answer. When using -a bx=100,
the interrupt interval of 7 is surprising because it gives a different number (167) then other numbers
do (like 150, 160, etc.).

9. 
 2000      ax          Thread 0                Thread 1         
    0       0   
    0       0   1000 test $1, %ax
    0       0   1001 je .signaller
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       0   1002 mov  2000, %cx
    0       0   1003 test $1, %cx
    0       0   1004 jne .waiter
    0       1   ------ Interrupt ------  ------ Interrupt ------  // Originally put 0 here, forgot that ax was set to 1 in thread 1...
    0       1                            1000 test $1, %ax
    0       1                            1001 je .signaller
    1       1                            1006 mov  $1, 2000
    1       1                            1007 halt
    1       0   ----- Halt;Switch -----  ----- Halt;Switch -----  
    1       0   1002 mov  2000, %cx
    1       0   1003 test $1, %cx
    1       0   1004 jne .waiter
    1       0   1005 halt

Thread 0 should loop infinitely until thread 1 increments VALUE at 2000 to 1, allowing
thread 0 to exit. Thread 0 is checking the VALUE at 2000 to see if it's equal to 1 and
looping if it isn't. The location at 2000 is being used as a flag to exit the program.
Its final value is 1.

10. The outcome would be that as thread 0 runs first, it sets VALUE to 1 and exits, allowing
thread 1 to exit as well, making for a much shorter program. Thread 0 is simply looking at 
VALUE at location 2000 and setting it to 1. Changing the interrupt interval wouldn't change
anything in this trace as no interrupts were needed (unless the interval was shorter than 3, 
in which case the trace is slightly longer). But in the previous example, shortening the interrupt
interval would decrease the length of the trace, and increasing the interrupt interval would
increase the length of the trace. This version of the code is efficiently using the CPU as the
CPU doesn't have much downtime, but the previous version wasn't because it was just waiting on 
another thread that hasn't ran yet.